trigger:
- '*'

variables:
- group : Build
- name  : local.projectName
  value : 'dotnet.core'
- name  : local.artifact
  value : 'packages'
  
stages:
- stage: Test
  displayName: Testing
  jobs:
  - job: Static_Testing
    displayName: Static Testing
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
    - group : Build.Static_Test
    steps:    
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: Prepare Analysis on SonarCloud
      inputs:
        SonarCloud: SonarCloud
        organization: $(static_test.sonarcloud.organization)
        projectKey: ${{ lower( variables['local.projectName']) }}
        projectName: ${{ lower( variables['local.projectName']) }}
    
    # The <ProjectGuid> element is not required if you build a solution (sln) containing that project.
    - task: DotNetCoreCLI@2
      displayName: Building   
      inputs:
        projects: '**/*.sln'
        arguments: '--configuration $(build.configuration.release)'

    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: Run Code Analysis

    - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
      displayName: Publish Quality Gate Result

    - task: WhiteSource Bolt@20
      displayName: 'Run WhiteSource Bolt'
      enabled: false

  - job: Unit_Testing
    displayName: Unit_Testing
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
      - group : Build.Unit_Test
      - name  : local.codecoveragehistory.directory
        value : '$(Build.ArtifactStagingDirectory)/history'
      - name  : local.codecoveragehistory.directory
        value : ${{ lower( variables['local.projectName']) }}.$(Build.SourceBranchName)
      - name  : 'disable.coverage.autogenerate'
        value : 'true'
    steps:
    - task: UniversalPackages@0
      displayName: Get Code Coverage History
      continueOnError: true
      inputs:
        command: download
        downloadDirectory: $(local.codecoveragehistory.directory)
        feedsToUse: internal
        vstsFeed: $(unit_test.coverage.history.feed)
        vstsFeedPackage: $(local.codecoveragehistory.directory)
        vstsPackageVersion: '0.*'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        arguments: '--configuration $(build.configuration.release) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        publishTestResults: true
        projects: '**/*[Tt]ests/*.csproj'

    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: Generating Coverage Report
      inputs:
        reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        targetdir: $(Build.SourcesDirectory)/Coverage
        reporttypes: HtmlInline_AzurePipelines;Cobertura;Badges
        historydir: $(local.codecoveragehistory.directory)

    - task: UniversalPackages@0
      displayName: Publish Code Coverage History
      inputs:
        command: publish
        publishDirectory: $(local.codecoveragehistory.directory)
        feedsToUsePublish: internal
        vstsFeedPublish: $(unit_test.coverage.history.feed)
        vstsFeedPackagePublish: $(local.codecoveragehistory.directory)
        versionOption: patch
        packagePublishDescription: Code Coverage History for repository $(Build.Repository.Name) on branch $(Build.SourceBranchName)
        verbosity: Information

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Report
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/Coverage/Cobertura.xml
        reportDirectory: $(Build.SourcesDirectory)/Coverage
  
- stage: Package
  displayName: Packaging
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Package
    displayName: Packaging
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
    - group: Build.NuGet
    steps:      
    - task: DotNetCoreCLI@2
      displayName: Create Pre-release Package
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: pack
        buildProperties: $(nuget.prerelease.suffix)
        packDirectory: '$(Build.ArtifactStagingDirectory)/$(local.artifact)'
        arguments: '--configuration $(build.configuration.release)'

    - task: DotNetCoreCLI@2
      displayName: Create Release Package
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: pack
        packDirectory: '$(Build.ArtifactStagingDirectory)/$(local.artifact)'
        arguments: '--configuration $(build.configuration.release)'
  
    - publish: $(Build.ArtifactStagingDirectory)/$(local.artifact)
      displayName: Publishing
      artifact: $(local.artifact)

# Prerelease
- stage: Publish_Prerelease
  displayName: Publish Prerelease
  dependsOn: Package
  condition: |
    and
    (
      succeeded(),
      ne(variables['Build.SourceBranch'], 'refs/heads/master')
    )
  jobs:
  - job: Publishing   
    displayName: Publishing     
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
    - group: Build.NuGet
    steps:
      - checkout: none

      - download: current
        displayName: Download artifacts
        artifact: $(local.artifact)

      - task: NuGetCommand@2
        displayName: 'Pushing to Feed: $(nuget.artifact.feed.prerelease)'
        inputs:
          command: push
          packagesToPush: '$(Agent.BuildDirectory)/$(local.artifact)/*.nupkg'
          nuGetFeedType: internal
          publishVstsFeed: $(nuget.artifact.feed.prerelease)

# Release
- stage: Publish_To_AzureDevops
  displayName: Publish to Azure DevOps Feed
  dependsOn: Package
  condition: | 
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master')
    )
  jobs:
  - job: Publishing 
    displayName: Publishing      
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
    - group: Build.NuGet
    steps:
      - checkout: none

      - download: current
        displayName: Download artifacts
        artifact: $(local.artifact)

      - task: NuGetCommand@2
        displayName: 'Pushing to Feed: $(nuget.artifact.feed.production)'
        inputs:
          command: push
          packagesToPush: '$(Agent.BuildDirectory)/$(local.artifact)/*.nupkg'
          nuGetFeedType: internal
          publishVstsFeed: $(nuget.artifact.feed.production)
          allowPackageConflicts: true
      
- stage: Publish_To_NuGet
  displayName: Publish to NuGet
  dependsOn: Package
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master')
    )
  jobs:
  - deployment:
    displayName: Publishing
    pool:
      vmImage: $(build.pool)
    workspace:
      clean: all
    variables:
    - group: Build.NuGet
    environment: NuGet-Repo
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none

            - download: current
              displayName: Download artifacts
              artifact: $(local.artifact)

            - task: NuGetToolInstaller@1
              displayName: Installing NuGet Tool
              inputs:
                versionSpec: '*'
                checkLatest: true

            - script: nuget push $(Agent.BuildDirectory)/$(local.artifact)/*.nupkg $(nuget.org.apiKey) -Source $(nuget.org.source) -SkipDuplicate -NoSymbols
              displayName: Pushing to NuGet.org
