trigger:
  - '*'

stages:
  - stage: 'Build'
    displayName: 'Build the library'
    jobs:
      - job: 'Build'
        displayName: 'Building project'

        pool:
          vmImage: 'ubuntu-latest'
        workspace:
          clean: all

        variables:
          buildConfiguration: 'Release'
          dotnetSdkVersion: '3.1.100'
          sonarQubeProject: 'PingDong.Shared'

        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
            inputs:
              packageType: sdk
              version: '$(dotnetSdkVersion)'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            displayName: 'Nuget Restore'
            inputs:
              command: restore
              projects: '**/*.csproj'
               
          - task: SonarQubePrepare@4
            enabled: false
            inputs:
              SonarQube: 'SonarQube'
              scannerMode: 'MSBuild'
              projectKey: '$(sonarQubeProject)'
              projectName: '$(sonarQubeProject)'
              extraProperties: |
                sonar.login=$(SonarQubeUserName)
                sonar.password=$(SonarQubePassword)
                sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/TestResults/Coverage.opencover.xml"

          - task: DotNetCoreCLI@2
            displayName: 'Build Solution - $(buildConfiguration)'
            inputs:
              command: build
              projects: '**/*.csproj'
              arguments: '--no-restore --configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Install ReportGenerator'
            inputs:
              command: custom
              custom: tool
              arguments: 'install --global dotnet-reportgenerator-globaltool'

          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests - $(buildConfiguration)'
            inputs:
              command: 'test'
              arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
              publishTestResults: true
              projects: '**/*[Tt]ests/*.csproj'

          - script: |
                reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
            displayName: 'Create code coverage report'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

          - task: SonarQubeAnalyze@4
            enabled: false

          - task: DotNetCoreCLI@2
            displayName: 'Create NuGet Package - Prerelease Version'
            condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              command: pack
              buildProperties: 'VersionSuffix="$(Build.SourceBranchName)-$(Build.BuildNumber)"'
              packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Create NuGet Package'
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              command: pack
              packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
              arguments: '--configuration $(buildConfiguration)'
              nobuild: true
        
          - publish: '$(Build.ArtifactStagingDirectory)/packages'
            artifact: 'packages'

  # Publish to Azure DevOps Artifacts feed
  - stage: 'PublishPrereleasePackageToAzureDevops'
    displayName: 'Publish Prerelease NuGet Package'
    dependsOn: 'Build'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job:
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - download: current
            artifact: 'packages'

          - task: NuGetCommand@2
            displayName: 'Push NuGet Package'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'Develop'

  - stage: 'PublishReleasePackageToAzureDevops'
    displayName: 'Publish Release NuGet Package'
    dependsOn: 'Build'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job:
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - download: current
            artifact: 'packages'

          - task: NuGetCommand@2
            displayName: 'Push NuGet Package'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'Production'
        
  # Publish to Nuget
  - stage: 'PublishReleasePackageToNuGet'
    displayName: 'Publish Release NuGet Package'
    dependsOn: 'PublishReleasePackageToAzureDevops'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - deployment:
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'NuGet-Repo'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NuGetCommand@2
                  displayName: 'Push NuGet Package'
                  inputs:
                    command: 'push'
                    packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
                    nuGetFeedType: 'external'
                    publishFeedCredentials: 'NuGet'
                    allowPackageConflicts: true
